#!/usr/bin/env python
# Send simple ARP requests using raw sockets
# Must run as root!
#
# Usage: arp-request.py <IFACE> <IP>
# Example: arp-request.py eth0 192.168.1.1
#   Broadcasts "Who has 192.168.1.1" over eth0 
#
# To test, use wireshark or tcpdump -i <IFACE> -vv -XX arp

import fcntl
import socket
import struct
import sys

PROTOCOL_IP = 0x0800

# Constants borrowed from /include/uapi/linux/sockios.h
SIOCGIFHWADDR = 0x8927
SIOCGIFADDR = 0x8915

# Get parameters
iface = sys.argv[1]
ip_str = sys.argv[2]
input_ip = "".join([chr(int(x)) for x in ip_str.split(".")])

rawSocket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(PROTOCOL_IP))
rawSocket.bind((iface, socket.htons(PROTOCOL_IP)))

# INTERFACE INFO
iface_mac = fcntl.ioctl(rawSocket.fileno(), SIOCGIFHWADDR, struct.pack('256s', iface[:15]))[18:24]
print >>sys.stderr, "MAC of " + iface + " " + ":".join(["%02x" % ord(c) for c in iface_mac])
iface_ip = fcntl.ioctl(rawSocket.fileno(), SIOCGIFADDR, struct.pack('256s', iface[:15]))[20:24]
print >>sys.stderr, "IP of " + iface + " " + ".".join(["%d" % ord(c) for c in iface_ip])

# BUILD ETHERNET FRAME
dst_mac = "\xff\xff\xff\xff\xff\xff" # Broadcast
ether_type = "\x08\x06" # ARP

ethernet_header = struct.pack("!6s6s2s", iface_mac, dst_mac, ether_type)

hw_type = "\x00\x01"		# Hardware type of 1 indicates Ethernet (2 bytes)
protocol_type = "\x08\x00"	# Protocol type, happens to be same val as ethertype for IP (2 byte)
hardware_size = "\x06"		# Size of hardware address (MAC address in this case) (1 byte)
protocol_size = "\x04"		# Size of protocol address (IP address in this case) (1 byte)
opcode = "\x00\x01"		# Opcode of 1 = ARP request (2 bytes)
sender_mac = iface_mac		# Sender MAC address (6 bytes)
sender_ip = iface_ip		# Sender IP address (4 bytes)
target_mac = dst_mac		# Target MAC address (6 bytes)
target_ip = input_ip		# Target IP address (4 bytes)

arp_message = struct.pack("!2s2s1s1s2s6s4s6s4s", hw_type, protocol_type, hardware_size,
	protocol_size, opcode, sender_mac, sender_ip, target_mac, target_ip)

print "".join(["%02x" % ord(c) for c in arp_message])

rawSocket.send(ethernet_header + arp_message)

