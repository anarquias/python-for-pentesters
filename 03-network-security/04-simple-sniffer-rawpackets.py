#!/usr/bin/env python
# Simple sniffer that prints src/dest MAC, IP, and Port numbers
# Must be root

import socket
import struct
import binascii

big_line = "================================================================"
small_line = "----------------------------------------------------------------"

# Use packet interface, raw socket, tell kernel we want to use protocol 0x0800 = IP
# See /usr/include/linux/if_ether.h
rawSocket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))

pkt = rawSocket.recvfrom(2048)

##########################################
# Ethernet Info
##########################################

raw_ethernet_header = pkt[0][0:14] # Ethernet header is 14 bytes.

# Unpack to tuple, like: ('\x00\x00\x00\x00\x00\x00', '\x00\x00\x00\x00\x00\x00', '\x08\x00')
ethernet_header = struct.unpack("!6s6s2s", raw_ethernet_header)

dst_mac = binascii.hexlify(ethernet_header[0])
src_mac = binascii.hexlify(ethernet_header[1])
protocol = binascii.hexlify(ethernet_header[2])

print big_line
print "ETHERNET"
print small_line
print "     Source MAC address: " + src_mac
print "Destination MAC address: " + dst_mac
print "\n"

##########################################
# IP Info
##########################################

raw_ip_header = pkt[0][14:34] # IP Header is 20 bytes

# Unpack to tuple, like: ('E\x00\x00<\xb7\x89@\x00@\x06\xff\x0b', '\xc0\xa8\x01k', '\xc0\xa8\x01k')
# Don't care about first 12 bytes, since src/dest ip comes after
ip_header = struct.unpack("!12s4s4s", raw_ip_header)

print big_line
print "IP"
print small_line
print "     Source IP address: " + socket.inet_ntoa(ip_header[1])
print "Destination IP address: " + socket.inet_ntoa(ip_header[2])
print "\n"

##########################################
# TCP Info
##########################################

raw_tcp_header = pkt[0][34:54]

# Unpack to tuple, like: (80, 55640, 'JvU\x8a\x00\x00\x00\x00P\x04\x00\x00\x9c\x01\x00\x00')
# First two items are short unsigned ints (2 bytes), followed by rest of tcp header
tcp_header = struct.unpack("!HH16s", raw_tcp_header)

src_port = tcp_header[0]
dst_port = tcp_header[1]

print big_line
print "TCP"
print small_line
print "     Source port number: " + str(src_port)
print "Destination port number: " + str(dst_port)
print "\n"


