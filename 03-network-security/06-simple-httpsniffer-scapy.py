#!/usr/bin/env python
# Simple HTTP sniffer using scapy.
# Prints HTTP headers and prints payload
# Strategy to identify HTTP traffic:
#   - Check for dest/src ports 80 8080, 443
#   - See if packet has Raw layer
#
# Usage: http-sniffer-scapy.py <IFACE> <COUNT>

from mimetools import Message
from StringIO import StringIO
import scapy.all as scapy
import sys
import zlib

big_line = "============================================================="

iface = sys.argv[1]
count = int(sys.argv[2])
http_bpf_filter = "tcp and (dst port 80 or dst port 8080 or dst port 443 " + \
		 "or src port 80 or src port 8080 or src port 443)"

pkts = scapy.sniff(iface=iface, filter=http_bpf_filter, count=count)

# Get sessions
sessions = pkts.sessions()

for k, v in sessions.iteritems():
	print big_line
	print k
	gzipped = False
	for i, p in enumerate(v):
		if p[scapy.TCP].sport == 443 and p.haslayer(scapy.Raw):
			# Assuming HTTPS
			print "Encrypted"
			break			

		if p.haslayer(scapy.Raw):
			# Grab http request/response
			print p.getlayer(scapy.Raw).load
			
