#!/usr/bin/env python
# SYN Scanner using scapy
#
# Usage: syn-port-scanner-scapy.py <target> <port range> <num-threads>
# Example: syn-port-scanner-scapy.py 192.168.1.1 1-1000 100
#
# Scans ports and prints ones that are listening
# Program performs TCP handshake and marks a port OPEN if a successful
# connection is made.
# Does not consider filtered ports

from scapy.all import *
import ipaddress
import sys
import threading
import time

BCAST_MAC = "ff:ff:ff:ff:ff:ff"
PROGRESS_WIDTH = 70
NUM_THREADS = int(sys.argv[3])

def progress(completed, total):
	width = PROGRESS_WIDTH
	progress = int(width * float(completed) / total)
	percent = "{:3.1f}".format(100 * float(completed)/total)
	sys.stdout.write("\b"*(width + 10) + "[" + 
		"="*progress + " "*(width-progress) +
		"] " + percent + "%")
	sys.stdout.flush()

print "Scanning....."

results = []
target_ip = unicode(sys.argv[1])
port_range = [int(x) for x in sys.argv[2].split("-")]
ports = range(port_range[0], port_range[1]+1)
len_ports = len(ports)

workers = []
sem = threading.Semaphore(value = NUM_THREADS)

class WorkerThread(threading.Thread):
	def __init__(self):
		threading.Thread.__init__(self)

	def run(self):
		while len(ports):
			port = ports.pop()
			tcp_res = sr1(IP(dst=target_ip)/TCP(dport=port, flags="S"), \
				timeout=5, verbose=0)
			if not tcp_res or not tcp_res.haslayer(TCP):
				continue
			if tcp_res.getlayer(TCP).flags == 0x12:
				results.append(port)
			progress(len_ports - len(ports), len_ports)
		sem.release()

progress(len_ports - len(ports), len_ports)

for i in range(NUM_THREADS):
	worker = WorkerThread()	
	worker.setDaemon(True)
	workers.append(worker)
	worker.start()
	sem.acquire()

while sem._Semaphore__value < NUM_THREADS:
	time.sleep(1)

print "\n"
results.sort()
for item in results:
	print str(item) + " is OPEN"
