#!/usr/bin/env python
# Usage: ftp_ls.py <SERVER LIST>
# Create a WorkerThread, that uses Queue, which can log in to ftp
# servers and list the root directory, then exit
# Use 5 threads for this job and 10 ftp sites

from ftplib import FTP
import threading
import Queue
import time
import sys

bigline = "====================================================================="

server_list = open(sys.argv[1], 'r')
output = []

class WorkerThread(threading.Thread):
  def __init__(self, queue):
    threading.Thread.__init__(self)
    self.queue = queue

  def run(self):
    while True:
      try:
        ftp_server = self.queue.get()
        server_info = {'host': ftp_server}
        ftp = FTP(ftp_server, timeout=30)
        ftp.login()
        ls_output = []
        ftp.retrlines('LIST', lambda x: ls_output.append(x))
        server_info['ls_output'] = '\n'.join(ls_output)
      except Exception, e:
        server_info['error'] = str(e)
      finally:
        ftp.quit()
        output.append(server_info)
        self.queue.task_done()

queue = Queue.Queue()

# Create 5 threads
for i in range(5):
  worker = WorkerThread(queue)
  worker.setDaemon(True)
  worker.start()

# Create jobs based on ftp server list
for line in server_list:
  if len(line) > 2:
    queue.put(line.rstrip())

queue.join()

for item in output:
  print bigline
  print item['host']
  print bigline + '\n'
  if 'ls_output' in item.keys():
    print item['ls_output']
  elif 'error' in item.keys():
    print item['error']
  else:
    print 'No LIST, an error probably occurred while retrieving info'
  print '\n\n\n'

print "All tasks over!"
